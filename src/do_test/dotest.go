package do_test

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/robertkrimen/otto"
)

func fibonacci(c, quit chan int) {
	x, y := 0, 1
	for {
		select {
		case c <- x:
			x, y = y, x+y
		case <-quit:
			fmt.Println("quit")
			return
		}
	}
}

//Dotest1 这是一个测试方法
func Dotest1() {
	c := make(chan int, 5)
	quit := make(chan int)
	go func() {
		for i := 0; i < 10; i++ {
			fmt.Println(<-c)
		}
		quit <- 0
	}()
	fibonacci(c, quit)
}

//NewTestFun aaa
func NewTestFun() {
	ch := make(chan int, 100)
	for b := 0; b < 100; b++ {
		ch <- b
	}
	for {
		c := <-ch
		fmt.Println(c)
		if len(ch) == 0 {
			return
		}
	}
}

//DoTestFun 这是一个测试方法
func DoTestFun() {

	// var regArr []int

	// abc(&regArr)
	// fmt.Println(len(regArr))

	bb := 666
	aa := &bb

	bbc(aa)
	fmt.Println(bb)
}

func abc(regArr *[]int) {

	for a := 0; a < 10; a++ {
		*regArr = append((*regArr), a)
	}
}

func bbc(aa *int) {
	*aa = 123
}

func TestPlus() {

	testStr := `
	function connect(){
		return {a} + 'aaba_bbab_aaba' + {b}
	}
	var result =connect()
	`
	kp := make(map[string]string)
	kp["a"] = "hello"
	kp["b"] = "world"
	testStr = strings.Replace(testStr, "{a}", "'"+kp["a"]+"'", -1)
	testStr = strings.Replace(testStr, "{b}", "'"+kp["b"]+"'", -1)

	vm := otto.New()
	vm.Run(testStr)
	result, _ := vm.Get("result")
	fmt.Println(result)

}

func TestJsVM() {

	testStr := `
		var theJson = {"@pk":123321,"haha":"hehe","arr":[{"test":"haishi hehe"}]}
		var thehaha = theJson["haha"]
		var thehaha2 = theJson["arr"][0]["test"]
	`
	vm := otto.New()
	vm.Run(testStr)
	result, _ := vm.Get("thehaha2")
	fmt.Println(result)

}

type AutoGenerated struct {
	URL           string `json:"url"`
	AuthURL       string `json:"authUrl"`
	Method        string `json:"method"`
	Accept        string `json:"accept"`
	Authorization string `json:"Authorization"`
	Connection    string `json:"Connection"`
	ContentLength string `json:"Content-Length"`
	ContentType   string `json:"content-type"`
	Cookie        string `json:"Cookie"`
	Host          string `json:"Host"`
	Origin        string `json:"Origin"`
	Referer       string `json:"Referer"`
	UserAgent     string `json:"User-Agent"`
}

func HttpTest() {

	templength := 220
	chDoIndexArr := make(chan int64, templength)

	for i := 0; i < templength; i++ {
		go doRequest(chDoIndexArr, i)
	}

	for i := 0; i < templength; i++ {
		<-chDoIndexArr
	}

}

func doRequest(chData chan int64, i int) {
	tempStr := `{ "Id":"gf` + strconv.Itoa(i) + `", "Code":"test` + strconv.Itoa(i) + `", "CodeTableName":"guftest" }`
	jsonStr := []byte(tempStr)
	url := "http://172.25.16.45/search/codeTable/dispatch/v1/upsertCodeTable"

	oldNowInt := time.Now().Unix()
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))

	req.Header.Set("accept", "application/json")
	req.Header.Set("authorization", "Bearer TGT-24330-OzmZtZzsXS6lCULfrSTttPg3WEaBtfgFrP5tQmfKfuRPfvubHV-cas01.example.org")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("content-type", "application/json; charset=UTF-8")
	req.Header.Set("Host", "172.25.16.45")
	req.Header.Set("Referer", "http://172.25.16.45/ui/worklist/")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36")

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		// handle error
	}

	defer resp.Body.Close()
	//io.Copy(os.Stdout, res.Body)//写到输出流，

	time.Sleep(1 * time.Second)

	searchURL := "http://172.25.16.45/search/codeTable/dispatch/v1/getCodeTableEntityByidsOrCodes"
	searchTempStr := `{ "CodeTableName":"guftest", "Ids":["gf` + strconv.Itoa(i) + `"]}`
	searchJSONStr := []byte(searchTempStr)
	req2, err := http.NewRequest("POST", searchURL, bytes.NewBuffer(searchJSONStr))
	req2.Header.Set("accept", "application/json")
	req2.Header.Set("authorization", "Bearer TGT-24330-OzmZtZzsXS6lCULfrSTttPg3WEaBtfgFrP5tQmfKfuRPfvubHV-cas01.example.org")
	req2.Header.Set("Connection", "keep-alive")
	req2.Header.Set("content-type", "application/json; charset=UTF-8")
	req2.Header.Set("Host", "172.25.16.45")
	req2.Header.Set("Referer", "http://172.25.16.45/ui/worklist/")
	req2.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36")

	searchClient := &http.Client{}
	res, err := searchClient.Do(req2)
	if err != nil {
		fmt.Println(err)
		// handle error
	}
	body, err := ioutil.ReadAll(res.Body) //转换byte数组
	if err != nil {
		fmt.Println("url read error")
	}
	defer res.Body.Close()
	bodystr := string(body)
	fmt.Println(bodystr)

	nowNowInt := time.Now().Unix()
	// bodyUTF := ConvertToByte(string(bodystr), "gbk", "utf8")

	chData <- (nowNowInt - oldNowInt)

}
